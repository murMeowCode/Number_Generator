"""–≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª —Å–µ—Ä–≤–∏—Å–∞"""#pylint: disable=C0413
import sys
import os
from contextlib import asynccontextmanager
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

from generator_service.api.generation import router
from generator_service.services.file_service import FileService
from shared.config.base import settings
from shared.messaging.producers import AuthProducer
from shared.utils.redis_client import RedisManager

@asynccontextmanager
async def lifespan(_: FastAPI):
    """
    Lifespan –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    # Startup
    print("üöÄ Starting Generator Service...")

    redis_manager = RedisManager()
    redis_client =  await redis_manager.get_celery_client()
    file_service = FileService()
    auth_producer = AuthProducer(settings.RABBITMQ_URL)

    try:
        ping_result = await redis_client.ping()
        print(f"‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ. Ping: {ping_result}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
        raise

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MinIO
    try:
        await file_service.init_minio()
        print("‚úÖ MinIO initialized successfully")
    except Exception as e:
        print(f"‚ùå MinIO initialization failed: {e}")
        raise

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RabbitMQ producer
    await auth_producer.connect()
    print("‚úÖ RabbitMQ producer –ø–æ–¥–∫–ª—é—á–µ–Ω")

    print("‚úÖ Generator Service started successfully")

    yield  # –ó–¥–µ—Å—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

    # Shutdown
    print("üõë Shutting down Generator Service...")

app = FastAPI(
    title="Generator Service",
    description="–°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
    version="1.0.0",
    lifespan=lifespan
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(router)

@app.get("/health")
async def health_check():
    """
    Health check —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    """
    return {
        "status": "healthy",
        "service": "generator",
        "version": "1.0.0"
    }
