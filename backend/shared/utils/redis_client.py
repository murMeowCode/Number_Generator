# services/redis_service.py
from functools import wraps
import json
import redis
from typing import Callable, Optional, Any, Dict
from uuid import UUID
import logging
from shared.config.base import settings

logger = logging.getLogger(__name__)

class RedisCacheService:
    def __init__(self):
        self.redis_client = redis.Redis(
            host=settings.REDIS_HOST,
            port=settings.REDIS_PORT,
            db=settings.REDIS_DB_CACHE,
            decode_responses=True,
            socket_connect_timeout=5,
            socket_timeout=5,
            retry_on_timeout=True
        )
        self.cache_ttl = 1800  # 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    def _get_cache_key_stat(self, sequence_id: UUID) -> str:
        return f"statistics:{sequence_id}"

    # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
    async def get(self, key: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É"""
        try:
            return self.redis_client.get(key)
        except redis.RedisError as e:
            logger.warning(f"Redis error when getting key {key}: {str(e)}")
            return None

    async def setex(self, key: str, ttl: int, value: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å TTL"""
        try:
            result = self.redis_client.setex(key, ttl, value)
            return bool(result)
        except redis.RedisError as e:
            logger.error(f"Redis error when setting key {key}: {str(e)}")
            return False

    async def delete(self, key: str) -> int:
        """–£–¥–∞–ª–∏—Ç—å –∫–ª—é—á"""
        try:
            return self.redis_client.delete(key)
        except redis.RedisError as e:
            logger.error(f"Redis error when deleting key {key}: {str(e)}")
            return 0

    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async def get_cached_statistics(self, sequence_id: UUID) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –∫—ç—à–∞ –ø–æ ID"""
        try:
            cache_key = self._get_cache_key_stat(sequence_id)
            cached_data = self.redis_client.get(cache_key)
            
            if cached_data:
                logger.info(f"Cache hit for statistics_id: {sequence_id}")
                return json.loads(cached_data)
            return None
                
        except (redis.RedisError, json.JSONDecodeError) as e:
            logger.warning(f"Redis error when getting cache for {sequence_id}: {str(e)}")
            return None

    async def set_cached_statistics(self, sequence_id: UUID, data: Dict[str, Any]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫—ç—à"""
        try:
            cache_key = self._get_cache_key_stat(sequence_id)
            serialized_data = json.dumps(data, default=str)
            
            result = self.redis_client.setex(cache_key, self.cache_ttl, serialized_data)
            
            if result:
                logger.info(f"Successfully cached statistics for {sequence_id}")
            return bool(result)
            
        except (redis.RedisError, TypeError, ValueError) as e:
            logger.error(f"Redis error when setting cache for {sequence_id}: {str(e)}")
            return False

    async def delete_cached_statistics(self, sequence_id: UUID) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –∫—ç—à–∞"""
        try:
            cache_key = self._get_cache_key_stat(sequence_id)
            result = self.redis_client.delete(cache_key)
            
            if result:
                logger.info(f"Successfully deleted cache for {sequence_id}")
            return bool(result)
            
        except redis.RedisError as e:
            logger.error(f"Redis error when deleting cache for {sequence_id}: {str(e)}")
            return False

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
redis_cache = RedisCacheService()

async def get_redis_cache():
    return redis_cache

def cache_statistics(
    key_param: str = "sequence_id",
    ttl: int = 1800
):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    
    Args:
        key_param: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ statistics_id
        ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        async def wrapper(*args, **kwargs) -> Any:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º statistics_id –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            sequence_id = None
            
            # –ò—â–µ–º statistics_id –≤ kwargs
            if key_param in kwargs:
                sequence_id = kwargs[key_param]
            # –ò–ª–∏ –≤ args (–ø–æ –ø–æ–∑–∏—Ü–∏–∏)
            else:
                # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                import inspect
                sig = inspect.signature(func)
                params = list(sig.parameters.keys())
                
                if key_param in params:
                    param_index = params.index(key_param)
                    if param_index < len(args):
                        sequence_id = args[param_index]
            
            if not sequence_id:
                print(f"Parameter {key_param} not found in function call")
                return await func(*args, **kwargs)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
            try:
                cached_data = await redis_cache.get_cached_statistics(sequence_id)
                if cached_data:
                    print(f"Cache hit for {key_param}: {sequence_id}")
                    return cached_data
            except Exception as e:
                print(f"Cache check failed for {sequence_id}: {str(e)}")
            
            # –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            print(f"Cache miss for {key_param}: {sequence_id}")
            result = await func(*args, **kwargs)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à
            try:
                if hasattr(result, 'dict'):
                    # –ï—Å–ª–∏ —ç—Ç–æ Pydantic –º–æ–¥–µ–ª—å
                    cache_data = result.dict()
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ dict
                    cache_data = result
                
                await redis_cache.set_cached_statistics(sequence_id, cache_data)
                print(f"Successfully cached result for {sequence_id}")
            except Exception as e:
                print(f"Failed to cache result for {sequence_id}: {str(e)}")
            
            return result
        
        return wrapper
    return decorator

def cache_dashboard(ttl: int = 300):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á 'dashboard:overview'
    """
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            cache_key = "dashboard:overview"
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
            cached_data = await redis_cache.get(cache_key)
            if cached_data:
                logger.info(f"‚úÖ –î–ê–®–ë–û–†–î - –ö–≠–®-–ü–û–ü–ê–î–ê–ù–ò–ï")
                return json.loads(cached_data)
            else:
                logger.info(f"‚ùå –î–ê–®–ë–û–†–î - –ö–≠–®-–ü–†–û–ú–ê–•")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ –∫—ç—à–µ
            result = await func(*args, **kwargs)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à
            if result:
                serialized_data = json.dumps(
                    result.dict() if hasattr(result, 'dict') else result, 
                    default=str
                )
                success = await redis_cache.setex(cache_key, ttl, serialized_data)
                if success:
                    logger.info(f"üíæ –î–ê–ù–ù–´–ï –î–ê–®–ë–û–†–î–ê –°–û–•–†–ê–ù–ï–ù–´ –í –ö–≠–® (TTL: {ttl}—Å–µ–∫)")
                else:
                    logger.error("‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –°–û–•–†–ê–ù–ò–¢–¨ –î–ê–ù–ù–´–ï –î–ê–®–ë–û–†–î–ê –í –ö–≠–®")
            
            return result
        return wrapper
    return decorator

async def invalidate_dashboard_cache():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–æ—á–∏—Å—Ç–∫–∏) –∫—ç—à–∞ –¥–∞—à–±–æ—Ä–¥–∞
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
    """
    cache_key = "dashboard:overview"
    
    try:
        deleted_count = await redis_cache.delete(cache_key)
        if deleted_count > 0:
            logger.info("üóëÔ∏è –ö–≠–® –î–ê–®–ë–û–†–î–ê –£–°–ü–ï–®–ù–û –û–ß–ò–©–ï–ù")
            return True
        else:
            logger.info("‚ÑπÔ∏è –ö–≠–® –î–ê–®–ë–û–†–î–ê –£–ñ–ï –ë–´–õ –ü–£–°–¢–´–ú")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –û–ß–ò–°–¢–ö–ï –ö–≠–®–ê –î–ê–®–ë–û–†–î–ê: {str(e)}")
        return False

def cache_generation_dashboard(ttl: int = 1800):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á 'generation_dashboard'
    """
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            cache_key = "generation_dashboard"
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
            cached_data = await redis_cache.get(cache_key)
            if cached_data:
                logger.info(f"‚úÖ GENERATION DASHBOARD - –ö–≠–®-–ü–û–ü–ê–î–ê–ù–ò–ï")
                return json.loads(cached_data)
            else:
                logger.info(f"‚ùå GENERATION DASHBOARD - –ö–≠–®-–ü–†–û–ú–ê–•")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ –∫—ç—à–µ
            result = await func(*args, **kwargs)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à
            if result:
                serialized_data = json.dumps(
                    [item.dict() if hasattr(item, 'dict') else item for item in result]
                    if isinstance(result, list) 
                    else result.dict() if hasattr(result, 'dict') else result, 
                    default=str
                )
                success = await redis_cache.setex(cache_key, ttl, serialized_data)
                if success:
                    logger.info(f"üíæ –î–ê–ù–ù–´–ï GENERATION DASHBOARD –°–û–•–†–ê–ù–ï–ù–´ –í –ö–≠–® (TTL: {ttl}—Å–µ–∫)")
                else:
                    logger.error("‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –°–û–•–†–ê–ù–ò–¢–¨ –î–ê–ù–ù–´–ï GENERATION DASHBOARD –í –ö–≠–®")
            
            return result
        return wrapper
    return decorator

async def invalidate_generation_dashboard_cache():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–æ—á–∏—Å—Ç–∫–∏) –∫—ç—à–∞ –¥–∞—à–±–æ—Ä–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    """
    cache_key = "generation_dashboard"
    
    try:
        deleted_count = await redis_cache.delete(cache_key)
        if deleted_count > 0:
            logger.info("üóëÔ∏è –ö–≠–® GENERATION DASHBOARD –£–°–ü–ï–®–ù–û –û–ß–ò–©–ï–ù")
            return True
        else:
            logger.info("‚ÑπÔ∏è –ö–≠–® GENERATION DASHBOARD –£–ñ–ï –ë–´–õ –ü–£–°–¢–´–ú")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –û–ß–ò–°–¢–ö–ï –ö–≠–®–ê GENERATION DASHBOARD: {str(e)}")
        return False
